// ====================== C√ÅC TH∆Ø VI·ªÜN ======================
import 'dart:async'; // D√πng ƒë·ªÉ t·∫°o b·ªô ƒë·∫øm th·ªùi gian (Timer)
import 'dart:math';  // D√πng cho random, t·∫°o v·ªã tr√≠ th·∫ª ng·∫´u nhi√™n
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart'; // L∆∞u d·ªØ li·ªáu (ƒëi·ªÉm, c·∫•p ƒë·ªô)
import 'package:audioplayers/audioplayers.dart'; // Ph√°t √¢m thanh
import 'card_model.dart'; // File ƒë·ªãnh nghƒ©a c·∫•u tr√∫c c·ªßa t·ª´ng th·∫ª

// ====================== L·ªöP CH√çNH GAMELEVEL ======================
class GameLevel extends ChangeNotifier {
  // ----- C·∫•u h√¨nh c∆° b·∫£n -----
  final int level;         // C·∫•p ƒë·ªô hi·ªán t·∫°i
  final int slevel = 10;   // T·ªïng s·ªë level
  late final List<CardModel> cards;  // Danh s√°ch t·∫•t c·∫£ th·∫ª
  late final int timeLimit;           // Gi·ªõi h·∫°n th·ªùi gian cho level

  // ----- C√°c b·ªô ƒë·∫øm v√† tr·∫°ng th√°i -----
  Timer? _timer;           // ƒê·∫øm th·ªùi gian c√≤n l·∫°i khi ch∆°i
  Timer? _previewTimer;    // B·ªô ƒë·∫øm th·ªùi gian hi·ªÉn th·ªã preview (xem tr∆∞·ªõc)
  int _timeRemaining = 0;  // Th·ªùi gian c√≤n l·∫°i
  bool _isGameStarted = false; // Game ƒë√£ b·∫Øt ƒë·∫ßu ch∆∞a
  bool _isPreview = true;      // ƒêang trong giai ƒëo·∫°n xem tr∆∞·ªõc
  bool _inputLocked = true;    // C√≥ ƒëang kh√≥a ng∆∞·ªùi ch∆°i kh√¥ng (kh√¥ng cho click)
  bool _isShuffling = false;   // ƒêang x√°o tr·ªôn th·∫ª kh√¥ng

  // ----- D·ªØ li·ªáu t·∫°m khi l·∫≠t th·∫ª -----
  CardModel? _first;       // Th·∫ª ƒë·∫ßu ti√™n ƒë∆∞·ª£c ch·ªçn
  CardModel? _second;      // Th·∫ª th·ª© hai ƒë∆∞·ª£c ch·ªçn
  int _matchesFound = 0;   // S·ªë c·∫∑p ƒë√£ gh√©p ƒë√∫ng

  // ‚úÖ T·ªïng ƒëi·ªÉm ƒë∆∞·ª£c l∆∞u gi·ªØa c√°c level
  int _score = 0;

  // ----- √Çm thanh -----
  final _audio = AudioPlayer();
  bool get isShuffling => _isShuffling;

  // ----- Callback (h√†m g·ªçi khi c√≥ s·ª± ki·ªán) -----
  VoidCallback? _onMatch;     // Khi gh√©p ƒë√∫ng
  VoidCallback? _onMismatch;  // Khi gh√©p sai
  VoidCallback? _onGameOver;  // Khi thua (h·∫øt th·ªùi gian ho·∫∑c tr√∫ng bomb)
  VoidCallback? _onTimeUp;    // Khi h·∫øt gi·ªù

  // üëâ Callback ƒë·ªÉ giao di·ªán bi·∫øt khi n√†o x√°o tr·ªôn (cho hi·ªáu ·ª©ng)
  VoidCallback? onShuffle;

  // ====================== TR·ª¢ GI√öP ======================
  int _helpUsed = 0;                // ƒê·∫øm s·ªë l·∫ßn ƒë√£ d√πng tr·ª£ gi√∫p
  static const int _helpLimit = 3;  // Gi·ªõi h·∫°n 3 l·∫ßn/tr·∫≠n
  static bool _nextLevelPenalty = false; // Gi·∫£m th·ªùi gian ·ªü level sau n·∫øu d√πng tr·ª£ gi√∫p
  // =====================================================

  // ------------------- H√ÄM KH·ªûI T·∫†O -------------------
  GameLevel({required this.level}) {
    int baseTime = 30 + (level - 1) * 8; // M·ªói level tƒÉng th√™m 8 gi√¢y

    if (_nextLevelPenalty) {
      baseTime = max(10, baseTime - 15); // N·∫øu d√πng tr·ª£ gi√∫p tr∆∞·ªõc ƒë√≥ ‚Üí gi·∫£m th·ªùi gian
      _nextLevelPenalty = false;
    }

    timeLimit = baseTime;
    _timeRemaining = timeLimit;
    cards = _generateCards(); // G·ªçi h√†m t·∫°o b·ªô b√†i
  }

  // ------------------- T√çNH S·ªê C·∫∂P TH·∫∫ -------------------
  int get _pairs => 2 + (level - 1); // Level c√†ng cao ‚Üí c√†ng nhi·ªÅu c·∫∑p

  // ------------------- H√ÄM T·∫†O DANH S√ÅCH TH·∫∫ -------------------
  List<CardModel> _generateCards() {
    final images = _getCardImages();
    final list = <CardModel>[];

    // T·∫°o c·∫∑p th·∫ª
    for (var i = 0; i < _pairs; i++) {
      final img = images[i % images.length];
      list.add(CardModel(id: i, imagePath: img)); // Th·∫ª 1
      list.add(CardModel(id: i, imagePath: img)); // Th·∫ª 2 (c√πng id)
    }

    // T·ª´ level 4 tr·ªü l√™n ‚Üí th√™m bomb
    if (level >= 4) {
      int bombCount = 1 + ((level - 4) ~/ 2); // M·ªói 2 level tƒÉng 1 bomb
      for (int i = 0; i < bombCount; i++) {
        list.add(CardModel.boom()); // Th√™m th·∫ª bomb ƒë·∫∑c bi·ªát
      }
    }

    list.shuffle(Random()); // X√°o ng·∫´u nhi√™n
    return list;
  }

  // ------------------- ·∫¢NH C·ª¶A C√ÅC TH·∫∫ -------------------
  List<String> _getCardImages() => const [
        'assets/cards/1.png',
        'assets/cards/2.png',
        'assets/cards/3.png',
        'assets/cards/4.png',
        'assets/cards/5.png',
        'assets/cards/7.png',
        'assets/cards/8.png',
        'assets/cards/9.png',
        'assets/cards/10.png',
        'assets/cards/11.png',
      ];

  // ============================================================
  // ================== KH·ªûI ƒê·ªòNG M·ªòT LEVEL =====================
  // ============================================================
  Future<void> startLevel(
    VoidCallback onTimeUp, { // G·ªçi khi h·∫øt th·ªùi gian
    VoidCallback? onMatch,
    VoidCallback? onMismatch,
    VoidCallback? onGameOver,
  }) async {
    _helpUsed = 0; // Reset tr·ª£ gi√∫p
    _onMatch = onMatch;
    _onMismatch = onMismatch;
    _onGameOver = onGameOver;
    _onTimeUp = onTimeUp;

    _isGameStarted = true;
    _isPreview = true;
    _inputLocked = true;

    // ‚úÖ L·∫•y ƒëi·ªÉm t·ªïng ƒë√£ l∆∞u tr∆∞·ªõc ƒë√≥
    _score = await _loadTotalScore();
    _matchesFound = 0;

    // L·∫≠t t·∫•t c·∫£ th·∫ª cho ng∆∞·ªùi ch∆°i xem (preview)
    for (final c in cards) {
      c.isFlipped = true;
      c.isMatched = false;
    }
    notifyListeners();

    // Sau 5 gi√¢y ‚Üí √∫p l·∫°i & b·∫Øt ƒë·∫ßu ƒë·∫øm gi·ªù
    _previewTimer?.cancel();
    _previewTimer = Timer(const Duration(seconds: 5), () {
      for (final c in cards) {
        c.isFlipped = false;
      }

      shuffleCards(); // üî• X√°o tr·ªôn v·ªã tr√≠ th·∫ª sau preview
      _isPreview = false;
      _inputLocked = false;
      _startTimer(onTimeUp);
      notifyListeners();
    });
  }

  // ============================================================
  // ================== H√ÄM ƒê·∫æM GI·ªú LEVEL =======================
  // ============================================================
  void _startTimer(VoidCallback onTimeUp) {
    _timer?.cancel();
    _timer = Timer.periodic(const Duration(seconds: 1), (timer) async {
      if (_timeRemaining > 0) {
        _timeRemaining--;
        if (isLevelComplete()) {
          await _saveBestLevel();
          await _saveTotalScore(); // L∆∞u ƒëi·ªÉm khi th·∫Øng
          timer.cancel();
        }
      } else {
        timer.cancel();
        onTimeUp(); // H·∫øt gi·ªù ‚Üí thua
      }
      notifyListeners();
    });
  }

  // ============================================================
  // =============== üîÅ X√ÅO TR·ªòN SAU PREVIEW ===================
  // ============================================================
  void shuffleCards() {
    if (!_isGameStarted) return;

    _isShuffling = true;
    _inputLocked = true;

    // L∆∞u tr·∫°ng th√°i tr∆∞·ªõc khi x√°o
    final matchMap = {for (var c in cards) c.id: c.isMatched};
    final flipMap = {for (var c in cards) c.id: c.isFlipped};
    final oldOrder = List<CardModel>.from(cards);
    final random = Random();
    int tries = 0;

    // X√°o nhi·ªÅu l·∫ßn ƒë·ªÉ tr√°nh gi·ªëng v·ªã tr√≠ c≈©
    do {
      cards.shuffle(random);
      tries++;
    } while (
        tries < 10 &&
        List.generate(cards.length, (i) => cards[i] == oldOrder[i])
            .any((same) => same));

    // Ph·ª•c h·ªìi tr·∫°ng th√°i flip v√† matched
    for (var c in cards) {
      c.isMatched = matchMap[c.id] ?? false;
      c.isFlipped = flipMap[c.id] ?? false;
    }

    _playShuffleSound();
    onShuffle?.call();
    notifyListeners();

    // M·ªü l·∫°i thao t√°c sau 400ms
    Future.delayed(const Duration(milliseconds: 400), () {
      _isShuffling = false;
      _inputLocked = false;
      notifyListeners();
    });
  }

  // √Çm thanh khi x√°o tr·ªôn
  Future<void> _playShuffleSound() async {
    try {
      await _audio.play(AssetSource('audio/xoat.mp3'));
    } catch (e) {
      debugPrint("Kh√¥ng ph√°t ƒë∆∞·ª£c √¢m thanh xo·∫°t: $e");
    }
  }

  // ============================================================
  // ================ X·ª¨ L√ù NG∆Ø·ªúI CH∆†I L·∫¨T TH·∫∫ =================
  // ============================================================
  void onCardTapped(CardModel card) {
    if (!_isGameStarted || _inputLocked || card.isFlipped || card.isMatched) return;

    card.flip();
    notifyListeners();

    // üí• N·∫øu l√† bomb ‚Üí thua lu√¥n
    if (card.isBoom) {
      _inputLocked = true;
      Future.delayed(const Duration(milliseconds: 600), () {
        _onGameOver?.call();
        card.flip();
        _inputLocked = false;
        notifyListeners();
      });
      return;
    }

    // N·∫øu l√† th·∫ª ƒë·∫ßu ti√™n
    if (_first == null) {
      _first = card;
      return;
    }

    // N·∫øu l√† th·∫ª th·ª© hai
    _second = card;
    _inputLocked = true;

    // N·∫øu tr√πng ID ‚Üí gh√©p ƒë√∫ng
    if (_first!.id == _second!.id) {
      Future.delayed(const Duration(milliseconds: 350), () async {
        _first?.match();
        _second?.match();
        _matchesFound++;
        _score += 10;
        _onMatch?.call();
        _resetSelection();
        _inputLocked = false;
        await _saveTotalScore();
        notifyListeners();
      });
    } else {
      _onMismatch?.call();
      _score = max(0, _score - 3); // Tr·ª´ 3 ƒëi·ªÉm khi sai

      Future.delayed(const Duration(milliseconds: 700), () async {
        _first?.flip();
        _second?.flip();
        _resetSelection();
        _inputLocked = false;
        await _saveTotalScore();
        notifyListeners();
      });
    }
  }

  void _resetSelection() {
    _first = null;
    _second = null;
  }

  bool isLevelComplete() => _matchesFound == _pairs;

  // ============================================================
  // ================== L∆ØU / T·∫¢I D·ªÆ LI·ªÜU ======================
  // ============================================================
  Future<void> _saveTotalScore() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('totalScore', _score);
  }

  Future<int> _loadTotalScore() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getInt('totalScore') ?? 0;
  }

  Future<void> resetTotalScore() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('totalScore', 0);
    _score = 0;
    notifyListeners();
  }

  Future<void> _saveBestLevel() async {
    final prefs = await SharedPreferences.getInstance();
    final best = prefs.getInt('bestLevel') ?? 1;
    if (level > best) await prefs.setInt('bestLevel', level);
  }

  // ============================================================
  // ====================== TR·ª¢ GI√öP ============================
  // ============================================================
  bool get canUseHelp => _helpUsed < _helpLimit;
  int get helpUsed => _helpUsed;
  int get helpLimit => _helpLimit;

  // Th√™m 10 gi√¢y
  void helpAddTime() {
    if (!canUseHelp) return;
    _helpUsed++;
    _timeRemaining += 10;
    _nextLevelPenalty = true;
    notifyListeners();
  }

  // L·∫≠t t·∫•t c·∫£ th·∫ª trong 3 gi√¢y
  void helpRevealAll() {
    if (!canUseHelp) return;
    _helpUsed++;
    for (final c in cards) c.isFlipped = true;
    notifyListeners();

    Future.delayed(const Duration(seconds: 3), () {
      for (final c in cards) {
        if (!c.isMatched) c.isFlipped = false;
      }
      reduceTime(5); // Gi·∫£m 5s ph·∫°t
      notifyListeners();
    });
  }

  // X√≥a 1 bomb
  void helpRemoveBomb() {
    if (!canUseHelp || level < 4) return;
    _helpUsed++;
    final bombIndex = cards.indexWhere((c) => c.isBoom);
    if (bombIndex != -1) {
      cards.removeAt(bombIndex);
      notifyListeners();
    }
  }

  // Gi·∫£m th·ªùi gian
  void reduceTime(int seconds) {
    _timeRemaining = (_timeRemaining - seconds).clamp(0, timeLimit).toInt();
    notifyListeners();
  }

  // ============================================================
  // ==================== C√ÅC GETTER ============================
  // ============================================================
  int get timeRemaining => _timeRemaining;
  bool get isGameStarted => _isGameStarted;
  bool get isPreview => _isPreview;
  bool get inputLocked => _inputLocked;
  int get score => _score;
  int get maxTime => timeLimit;

  // ============================================================
  // ===================== H·ª¶Y B·ªò ƒê·∫æM ==========================
  // ============================================================
  @override
  void dispose() {
    _timer?.cancel();
    _previewTimer?.cancel();
    _audio.dispose();
    super.dispose();
  }
}
