import 'package:flutter/material.dart';

/// Qu·∫£n l√Ω to√†n b·ªô animation c·ªßa th·∫ª (flip / shake / move)
class CardEffects {
  late final AnimationController flipController;
  late final AnimationController shakeController;
  late final AnimationController moveController;

  late final Animation<double> flipAnimation;
  late final Animation<double> shakeAnimation;
  late final Animation<Offset> moveAnimation;

  final TickerProvider vsync;

  CardEffects(this.vsync) {
    // üåÄ L·∫≠t th·∫ª
    flipController = AnimationController(
      vsync: vsync,
      duration: const Duration(milliseconds: 300),
    );
    flipAnimation = Tween<double>(begin: 0, end: 1).animate(
      CurvedAnimation(parent: flipController, curve: Curves.linear),
    );

    // üí• Rung khi nh·∫•n
    shakeController = AnimationController(
      vsync: vsync,
      duration: const Duration(milliseconds: 250),
    );
    shakeAnimation = Tween<double>(begin: 0, end: 6).animate(
      CurvedAnimation(parent: shakeController, curve: Curves.elasticIn),
    );

    // üöÄ Di chuy·ªÉn (bay l√™n xu·ªëng)
    moveController = AnimationController(
      vsync: vsync,
      duration: const Duration(milliseconds: 600),
    );
    moveAnimation = Tween<Offset>(
      begin: Offset.zero,
      end: const Offset(0, -0.2),
    ).animate(
      CurvedAnimation(parent: moveController, curve: Curves.easeInOut),
    );
  }

  /// Khi x√°o tr·ªôn th·∫ª
  void playShuffleEffect() {
    moveController
      ..reset()
      ..forward().then((_) => moveController.reverse());
  }

  /// Khi ng∆∞·ªùi ch∆°i ch·ªçn sai
  void playShake() {
    shakeController
      ..reset()
      ..forward();
  }

  /// ƒê·ªìng b·ªô tr·∫°ng th√°i l·∫≠t th·∫ª
  void syncFlip(bool isFlipped) {
    if (isFlipped && flipController.value == 0) {
      flipController.forward();
    } else if (!isFlipped && flipController.value == 1) {
      flipController.reverse();
    }
  }

  /// H·ªßy b·ªè t·∫•t c·∫£ animation
  void dispose() {
    flipController.dispose();
    shakeController.dispose();
    moveController.dispose();
  }
}
